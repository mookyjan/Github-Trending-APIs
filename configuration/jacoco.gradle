
allprojects {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion jacocoVersion
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }
}

FileCollection jacocoSourceDirectories(Set subprojects) {
    Set srcDirs = []
    subprojects.each { project ->
        srcDirs.add("$project.projectDir/src/main/kotlin")
    }
    return files(srcDirs)
}

FileTree jacocoClassDirectories(Set subprojects) {
    List<String> excludes = [
            // Android
            'android/**/*.*',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            // Databinding
            '**/databinding/*Binding.*',
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/BR.class',
            // Dependency Injection
            '**/injection/**/*.*',
            '**/Manifest*.*',
            '**/*_MembersInjector.*',
            '**/Dagger*Component.*',
            '**/Dagger*Component$Builder.*',
            '**/*Module_*Factory.*',
            // Pojos, Models, Entities
            '**/model/*.*',
            '**/entities/*.*',
            '**/entity/*.*'
    ]
    def classDirectories = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
    subprojects.each { project ->
        classDirectories += fileTree(dir: "$project.buildDir/classes/kotlin/main", exclude: excludes)
        classDirectories += fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", exclude: excludes)
    }
    return classDirectories
}
//":data:testDebugUnitTest",
task jacocoTestReport(type: JacocoReport,
        dependsOn: [":data:testDebugUnitTest",
                    ":domain:test",
                    ":presentation:testDebugUnitTest"]) {
    group = 'Reporting'
    description = 'Generate JaCoCo coverage reports'

    sourceDirectories = jacocoSourceDirectories(subprojects)
    classDirectories = jacocoClassDirectories(subprojects)
    executionData = rootProject.fileTree(dir: '.', includes: [
            "**/testDebugUnitTest.exec", "**/test.exec", "**/*coverage.ec"
    ])

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${rootProject.buildDir}/reports/coverage")
        commandLine "open", "${rootProject.buildDir}/reports/jacoco/codeCoverageReport/html/index.html"
    }
}